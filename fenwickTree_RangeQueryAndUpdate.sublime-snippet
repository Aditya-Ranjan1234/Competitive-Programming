<snippet>
	<content><![CDATA[
// Fenwick Tree, RangeSum and Range Update - O(nlogn)
#define ll long long int
#define MOD 1000000007
class Fenwick{
public:
    // Make sure, to query and update - based on 1 indexing
    // Because entire fenwick tree is 1 based !!
    vector<ll> B1, B2;
    int n;
    Fenwick(int n){
        this->n = n;
        B1.resize(n+1, 0);
        B2.resize(n+1, 0);
    }
    
    void add(vector<ll>& b, int idx, ll x){
        while(idx <= n){
            b[idx] += x;
            idx += (idx & -idx);
        }
    }
    
    void rangeAdd(int l, int r, ll x){
        add(B1, l, x);
        add(B1, r+1, -x);
        add(B2, l, x*(l-1));
        add(B2, r+1, -x*r);
    }
    
    ll sum(vector<ll>&b, int idx){
        ll total = 0;
        while(idx > 0){
            total += b[idx];
            idx -= (idx & -idx);
        }
        return total;
    }
    
    ll prefSum(int idx){
        return sum(B1, idx)*idx - sum(B2, idx);
    }
    
    ll rangeSum(int l, int r){
        return prefSum(r) - prefSum(l-1);
    } 
};
/* How to use code ->
Link: https://leetcode.com/submissions/detail/1091159476/
		ll ans = 1, n = nums.size();
        int prev=1;
        Fenwick fenwickTree(n); //make sure - to query and update 1 based indexing
        unordered_map<int, int> prevLoc;
        fenwickTree.rangeAdd(1, 1, 1); // Adding 1 in range l,r where l,r is (0, 0) in actual array -> (1, 1) in bit array
        prevLoc[nums[0]] = 0;
        
        for(int i=1;i<n;i++){
            
            // 2. Range update from [l, r] -> l is the last location of cur nums[i]
            int l = (prevLoc.find(nums[i]) != prevLoc.end()) ?  prevLoc[nums[i]]+1 : 0; //l is 0 based
            prevLoc[nums[i]] = i;
            ll prevRangeSum = fenwickTree.rangeSum(l+1, i-1+1); //added 1 to make indexing 1 based
            fenwickTree.rangeAdd(l+1, i+1, 1); //added 1 to make indexing 1 based
            
            ll cur = (prev + 2 * prevRangeSum%MOD + (i-l) + 1)%MOD; 
            ans = (ans +  cur)%MOD;
            prev = cur;
        }
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fenwickTree_RangeQueryAndUpdate</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
